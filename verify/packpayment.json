{
	"language": "Solidity",
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
		},
		"@openzeppelin/contracts/security/ReentrancyGuard.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
		},
		"contracts/PackPayment.sol": {
			"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\n//ownable.sol\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n//reentrancyGuard.sol\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n//erc20 interface\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract PackPayment is Ownable, ReentrancyGuard {\n    uint256 public packCounter;\n    address public paymentReceiver;\n    error ERC20TokenAddressAlreadyExist();\n    error PackDoesNotExist();\n    error PaymentNotEnough();\n    error ERC20PaymentNotSupported();\n    error ERC20TokenNotSupported();\n    error OutOfStock();\n    error PaymentFailed();\n\n    event PaymentReceived(\n        address from,\n        address tokenAddress,\n        uint256 amount,\n        string packName,\n        string emberId,\n        string gameId,\n        bytes32 hash\n    );\n\n    struct Pack {\n        uint256 id;\n        string name;\n        ERC20Payment[] erc20Payments;\n        uint256 inventory;\n        uint256 nativePrice;\n    }\n\n    struct ERC20Payment {\n        address token;\n        uint256 price;\n    }\n\n    mapping(uint256 => Pack) public packs;\n\n    constructor(address _paymentReceiver) Ownable() {\n        paymentReceiver = _paymentReceiver;\n        packCounter = 1;\n    }\n\n    function createPack(\n        string memory _name,\n        uint256 nativePrice,\n        uint256 _inventory\n    ) public onlyOwner {\n        packs[packCounter].id = packCounter;\n        packs[packCounter].name = _name;\n        packs[packCounter].inventory = _inventory;\n        packs[packCounter].nativePrice = nativePrice;\n        packCounter++;\n    }\n\n    function removePack(uint256 _packId) public onlyOwner {\n        delete packs[_packId];\n    }\n\n    function addERC20Payment(\n        uint256 _packId,\n        address _token,\n        uint256 _price\n    ) public onlyOwner {\n        if (packs[_packId].id == 0) revert PackDoesNotExist();\n        uint256 length = packs[_packId].erc20Payments.length;\n        if (length > 0) {\n            for (uint256 i = 0; i < packs[_packId].erc20Payments.length; i++) {\n                if (packs[_packId].erc20Payments[i].token == _token)\n                    revert ERC20TokenAddressAlreadyExist();\n            }\n        }\n\n        ERC20Payment memory erc20Payment = ERC20Payment(_token, _price);\n        packs[_packId].erc20Payments.push(erc20Payment);\n    }\n\n    function removeERC20Payment(\n        uint256 _packId,\n        address _token\n    ) public onlyOwner {\n        if (packs[_packId].id == 0) revert PackDoesNotExist();\n        if (packs[_packId].erc20Payments.length == 0)\n            revert ERC20PaymentNotSupported();\n        // find the index of the token\n        uint256 index = 0;\n        uint256 length = packs[_packId].erc20Payments.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (packs[_packId].erc20Payments[i].token == _token) {\n                index = i;\n                break;\n            }\n        }\n        //swap the last element with the element to be deleted\n        packs[_packId].erc20Payments[index] = packs[_packId].erc20Payments[\n            length - 1\n        ];\n\n        //delete the last element\n        delete packs[_packId].erc20Payments[length - 1];\n    }\n\n    function setNativePrice(uint256 _packId, uint256 _price) public onlyOwner {\n        if (packs[_packId].id == 0) revert PackDoesNotExist();\n        packs[_packId].nativePrice = _price;\n    }\n\n    function getAllPacks() external view returns (Pack[] memory) {\n        Pack[] memory packViews = new Pack[](packCounter);\n        for (uint256 i = 0; i < packCounter; i++) {\n            if (packs[i].id == 0) continue;\n            packViews[i].id = packs[i].id;\n            packViews[i].name = packs[i].name;\n            packViews[i].inventory = packs[i].inventory;\n            packViews[i].nativePrice = packs[i].nativePrice;\n            packViews[i].erc20Payments = packs[i].erc20Payments;\n        }\n        return packViews;\n    }\n\n    function buyPackWithERC20(\n        uint256 _packId,\n        address _token,\n        string calldata _emberId,\n        string calldata _gameId,\n        uint256 _amount\n    ) public nonReentrant {\n        Pack memory pack = packs[_packId];\n        if (pack.id == 0) revert PackDoesNotExist();\n        if (pack.inventory == 0) revert OutOfStock();\n        if (pack.inventory < _amount) revert OutOfStock();\n        if (pack.erc20Payments.length == 0) revert ERC20PaymentNotSupported();\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                block.timestamp,\n                msg.sender,\n                pack.name,\n                pack.inventory\n            )\n        );\n        // check if the token is in the pack\n        bool tokenExist = false;\n        uint256 price = 0;\n\n        for (uint256 i = 0; i < pack.erc20Payments.length; i++) {\n            if (pack.erc20Payments[i].token == _token) {\n                tokenExist = true;\n                price = pack.erc20Payments[i].price;\n                break;\n            }\n        }\n        if (!tokenExist) revert ERC20TokenNotSupported();\n\n        pack.inventory -= _amount;\n\n        // transfer the token to the owner\n        bool result = IERC20(_token).transferFrom(\n            msg.sender,\n            paymentReceiver,\n            price * _amount\n        );\n\n        if (!result) revert PaymentFailed();\n\n        emit PaymentReceived(\n            msg.sender,\n            _token,\n            _amount,\n            pack.name,\n            _emberId,\n            _gameId,\n            hash\n        );\n    }\n\n    function buyPackWithNative(\n        uint256 _packId,\n        string calldata _emberId,\n        string calldata _gameId,\n        uint256 _amount\n    ) public payable nonReentrant {\n        if (packs[_packId].id == 0) revert PackDoesNotExist();\n        if (packs[_packId].inventory == 0) revert OutOfStock();\n        if (packs[_packId].inventory < _amount) revert OutOfStock();\n        if (packs[_packId].nativePrice == 0) revert ERC20PaymentNotSupported();\n\n        //random hash to prevent frontrunning\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                block.timestamp,\n                msg.sender,\n                packs[_packId].name,\n                packs[_packId].inventory\n            )\n        );\n        uint256 totalPrice = packs[_packId].nativePrice * _amount;\n        if (msg.value < totalPrice) revert PaymentNotEnough();\n        packs[_packId].inventory -= _amount;\n        payable(paymentReceiver).transfer(msg.value);\n        emit PaymentReceived(\n            msg.sender,\n            address(0),\n            _amount,\n            packs[_packId].name,\n            _emberId,\n            _gameId,\n            hash\n        );\n    }\n\n    function setPaymentReceiver(address _paymentReceiver) public onlyOwner {\n        paymentReceiver = _paymentReceiver;\n    }\n}\n"
		}
	},
	"settings": {
		"optimizer": { "enabled": true, "runs": 200 },
		"outputSelection": {
			"*": {
				"*": [
					"abi",
					"evm.bytecode",
					"evm.deployedBytecode",
					"evm.methodIdentifiers",
					"metadata"
				],
				"": ["ast"]
			}
		}
	}
}
